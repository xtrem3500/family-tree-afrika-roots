// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import { Database } from '@/types/supabase';

// Récupération des variables d'environnement
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

// Vérification de la présence des variables d'environnement
if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Missing Supabase environment variables. Please check your .env.local file.');
}

// Configuration du client Supabase
const supabaseConfig = {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    storageKey: 'family-tree-auth',
    storage: {
      getItem: (key: string) => {
        try {
          return JSON.parse(localStorage.getItem(key) || 'null');
        } catch (error) {
          console.error('Error reading from localStorage:', error);
          return null;
        }
      },
      setItem: (key: string, value: any) => {
        try {
          localStorage.setItem(key, JSON.stringify(value));
        } catch (error) {
          console.error('Error writing to localStorage:', error);
        }
      },
      removeItem: (key: string) => {
        try {
          localStorage.removeItem(key);
        } catch (error) {
          console.error('Error removing from localStorage:', error);
        }
      },
    },
  },
  global: {
    headers: {
      'x-application-name': import.meta.env.VITE_APP_NAME,
      'x-application-version': '1.0.0',
      'Access-Control-Allow-Origin': 'http://localhost:8080'
    },
  },
  realtime: {
    params: {
      eventsPerSecond: 10,
    },
  },
};

// Singleton pattern pour le client Supabase
let supabaseInstance: ReturnType<typeof createClient<Database>> | null = null;
let supabaseAdminInstance: ReturnType<typeof createClient<Database>> | null = null;

// Fonction pour obtenir l'instance unique du client Supabase
export const getSupabaseClient = () => {
  if (!supabaseInstance) {
    supabaseInstance = createClient<Database>(supabaseUrl, supabaseAnonKey, supabaseConfig);
  }
  return supabaseInstance;
};

// Fonction pour obtenir l'instance unique du client admin Supabase
export const getSupabaseAdminClient = () => {
  if (!supabaseAdminInstance) {
    supabaseAdminInstance = createClient<Database>(supabaseUrl, supabaseAnonKey, {
      ...supabaseConfig,
      auth: {
        ...supabaseConfig.auth,
        persistSession: false,
        autoRefreshToken: false,
      },
    });
  }
  return supabaseAdminInstance;
};

// Export des instances pour la rétrocompatibilité
export const supabase = getSupabaseClient();
export const supabaseAdmin = getSupabaseAdminClient();

// Types d'erreurs personnalisés
export class SupabaseError extends Error {
  constructor(message: string, public code?: string) {
    super(message);
    this.name = 'SupabaseError';
  }
}

// Fonction utilitaire pour gérer les erreurs Supabase
export const handleSupabaseError = (error: any): never => {
  console.error('Supabase error:', error);

  if (error instanceof Error) {
    throw new SupabaseError(error.message, error.name);
  }

  throw new SupabaseError(
    'Une erreur est survenue lors de l\'opération avec la base de données.',
    'UNKNOWN_ERROR'
  );
};

// Export des constantes de configuration
export const SUPABASE_CONFIG = {
  STORAGE_BUCKET: import.meta.env.VITE_STORAGE_BUCKET || 'family-photos',
  MAX_FILE_SIZE: parseInt(import.meta.env.VITE_MAX_FILE_SIZE || '5242880', 10),
  SESSION_DURATION: parseInt(import.meta.env.VITE_SESSION_DURATION || '86400', 10),
  REQUIRE_EMAIL_VERIFICATION: import.meta.env.VITE_REQUIRE_EMAIL_VERIFICATION === 'true',
} as const;
